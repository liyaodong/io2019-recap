#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+TITLE: Google I/O Redux 2019
#+Email: mail@liyaodong.com
#+Date:
#+Author:
#+OPTIONS: timestamp:nil, toc:nil, reveal_title_slide:nil, num:nil, reveal_history:true,
#+REVEAL_TRANS: concave
#+REVEAL_EXTRA_CSS: ./google_io.css
#+EXPORT_FILE_NAME: ../docs/web-components.html

* Web Components
  :PROPERTIES:
  :reveal_background: #ffffff
  :END:
  The Secret Ingredient Helping Power The Web
  #+REVEAL_HTML: <img class="stretch" src="./hashtag.gif">
** Outline
   - Current state of web components
   - What's driving adoption(pros-cons compare)
   - How to get started
* At the first glance
#+BEGIN_SRC javascript
class AppDrawer extends HTMLElement {

  // A getter/setter for an open property.
  get open() {
    return this.hasAttribute('open');
  }

  set open(val) {
    // Reflect the value of the open property as an HTML attribute.
    if (val) {
      this.setAttribute('open', '');
    } else {
      this.removeAttribute('open');
    }
    this.toggleDrawer();
  }

  // A getter/setter for a disabled property.
  get disabled() {
    return this.hasAttribute('disabled');
  }

  set disabled(val) {
    // Reflect the value of the disabled property as an HTML attribute.
    if (val) {
      this.setAttribute('disabled', '');
    } else {
      this.removeAttribute('disabled');
    }
  }

  // Can define constructor arguments if you wish.
  constructor() {
    // If you define a constructor, always call super() first!
    // This is specific to CE and required by the spec.
    super();

    // Setup a click listener on <app-drawer> itself.
    this.addEventListener('click', e => {
      // Don't toggle the drawer if it's disabled.
      if (this.disabled) {
        return;
      }
      this.toggleDrawer();
    });
  }

  toggleDrawer() {
    ...
  }
}

customElements.define('app-drawer', AppDrawer);
#+END_SRC
** How to use
#+BEGIN_SRC
<app-drawer>
<h1>This is Children</h1>
</app-drawer>

// children can read by JS this.children
#+END_SRC
** Lifecycle
- constructor // addEventListener, create shadowDOM
- connectedCallback // ajax call
- disconnectedCallback // cleanup listener
- attributeChangedCallback(attrName, oldVal, newVal) // watch attr in static observedAttributes
- adoptedCallback
** CSS/Shadow DOM
#+BEGIN_SRC html
<template id="x-foo-from-template">
  <style>
    p { color: green; }
  </style>
  <p>I'm in Shadow DOM. My markup was stamped from a <template>.</p>
</template>

<script>
  let tmpl = document.querySelector('#x-foo-from-template');

  customElements.define('x-foo-from-template', class extends HTMLElement {
    constructor() {
      super(); // always call super() first in the constructor.
      let shadowRoot = this.attachShadow({mode: 'open'});
      shadowRoot.appendChild(tmpl.content.cloneNode(true));
    }
    ...
  });
</script>
#+END_SRC
* Current state of web components
** who are using web components?
   Everyone
   - Youtube
   - Github
   - Google News(All AMP websites)
   - salesforce
** Custom Elements
  #+REVEAL_HTML: <img class="stretch" src="./custom-element.jpg">
** Web Components in Google
  #+REVEAL_HTML: <img class="stretch" src="webcomponents-in-google.jpg">
* What's driving adoption
** Framework VS Standard 2014
  #+REVEAL_HTML: <img class="stretch" src="https://d259t2jj6zp7qm.cloudfront.net/images/c_scale%2Cw_800-webstack_2014_plain_kovxlr.png">
** Framework VS Standard 2019
  #+REVEAL_HTML: <img class="stretch" src="https://d12fd6m9xo0jeo.cloudfront.net/f30e3522-04e3-4893-870d-d9d0c1935430.png">
** Framework VS Standard
- Performance(implatement in framework by JS vs implatement by native browser)
- Tooling ecosystem(framework based devtool vs browser devtool)
- No Breaking changes
- Being stuck with old technology(evolution)
- Being stuck inside a walled garden(protability)
- Interoperability(Across framework)
** Saleforce Lightning Web Components
  #+REVEAL_HTML: <a href="https://developer.salesforce.com/blogs/2018/12/introducing-lightning-web-components.html" target="_blank">Introducing lightning web components</a>
  #+REVEAL_HTML: <img class="stretch" src="./lwc.jpg">
* How to get started
  - [[https://developers.google.com/web/fundamentals/web-components/][Google Developers]]
  - [[https://developer.mozilla.org/en-US/docs/Web/Web_Components][MDN]]
  - [[https://open-wc.org/guide/#quickstart][open-wc]]
  - [[https://lit-html.polymer-project.org/][Polymer/lit-html]]
  - [[https://ionicframework.com/docs/][ionic-webcomponents]]
  - [[https://wiredjs.com/showcase.html][wiredjs]]
* Q&A
* Thanks
